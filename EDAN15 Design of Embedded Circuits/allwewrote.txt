.LOG

#include <stdio.h> include "platform.h" include "xil_printf.h" include <mb_interface.h>
typedef unsigned int ui; // begin queue
#define MAXQ 100
int pk = 0, kk = 0; int mqueue[MAXQ]; unsigned getnum() {
	char srb=0;
	unsigned num=0;
	// skip non digits
	while(srb < '0' || srb > '9') srb=XUartLite_RecvByte(STDIN_BASEADDRESS);
	// read all digits
	while(srb >= '0' && srb <= '9') {
		num=num*10+(srb-'0');
		srb=XUartLite_RecvByte(STDIN_BASEADDRESS);
	};
	return num;
}
void push(ui e) {
        mqueue[kk++%MAXQ] = e;
}
ui pop () {
        return mqueue[pk++%MAXQ];
}
char isempty() {
        return pk == kk;
}
int qlen() {
        return kk - pk;
}
void printq() {
        xil_printf("Queue:\n");
        xil_printf("Queue len: %d\n", qlen());
        for (int i = pk; i < kk; i++) {
                xil_printf("%d ", mqueue[i]);
        }
        xil_printf("End of queue\n");
}
// end quuee // ui gcd2 (ui a, ui b) {
        while (a != b) {
                if (b > a)
                        b -= a;
                else
                        a -= b;
        }
        return a;
}
int fillArray(const ui length){
        for(ui i = 0; i < length; i++){
                push(getnum());
        }
        return 0;
}
int main(void){
		xil_printf("GCD fastest program in the world(tm)\n v. 0.0.1");
        //const int BSZ = 0x100;
        ui length = getnum();
        ui buffer[length];
        ui mySol;
        fillArray(length);
        while (qlen() != 1) {
        	printq();
            int a = pop();
            int b = pop();
            int res = gcd2(a, b);
            push(res);
        }
        xil_printf("Result is: %d\n", pop());
}


// awesome fastest gcd everr!!


#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"


#include <mb_interface.h>

typedef unsigned int ui;

// begin queue

#define MAXQ 100
int pk = 0, kk = 0;
int mqueue[MAXQ];

unsigned getnum() {
	char srb=0;
	unsigned num=0;

	// skip non digits
	while(srb < '0' || srb > '9') srb=XUartLite_RecvByte(STDIN_BASEADDRESS);

	// read all digits
	while(srb >= '0' && srb <= '9') {
		num=num*10+(srb-'0');
		srb=XUartLite_RecvByte(STDIN_BASEADDRESS);
	};
	return num;
}


void push(ui e) {
        mqueue[kk++%MAXQ] = e;
}

ui pop () {
        return mqueue[pk++%MAXQ];
}

char isempty() {
        return pk == kk;
}

int qlen() {
        return kk - pk;
}

void printq() {
        xil_printf("Queue:\n");
        xil_printf("Queue len: %d\n", qlen());
        for (int i = pk; i < kk; i++) {
                xil_printf("%d ", mqueue[i]);
        }
        xil_printf("End of queue\n");
}
// end quuee
//
ui gcd2 (ui a, ui b) {
        while (a != b) {
                if (b > a)
                        b -= a;
                else
                        a -= b;
        }

        return a;
}

int fillArray(const ui length){
        for(ui i = 0; i < length; i++){
                push(getnum());
        }
        return 0;
}

int main(void){
		xil_printf("GCD fastest program in the world(tm)\n v. 0.0.1");
        //const int BSZ = 0x100;
        ui length = getnum();
        ui buffer[length];
        ui mySol;

        fillArray(length);

        while (qlen() != 1) {
        	printq();
            int a = pop();
            int b = pop();
            int res = gcd2(a, b);
            push(res);
        }

        xil_printf("Result is: %d\n", pop());
}

15:00 2019-04-29
Main core program:

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <mb_interface.h>

unsigned getnum() {
	char srb=0;
	unsigned num=0;

	// skip non digits
	while(srb < '0' || srb > '9') srb=XUartLite_RecvByte(STDIN_BASEADDRESS);

	// read all digits
	while(srb >= '0' && srb <= '9') {
		num=num*10+(srb-'0');
		srb=XUartLite_RecvByte(STDIN_BASEADDRESS);
	};
	return num;
}

// begin queue

typedef unsigned int ui;

#define MAXQ 100
int pk = 0, kk = 0;
int mqueue[MAXQ];

void push(ui e) {
        mqueue[kk++%MAXQ] = e;
}

ui pop () {
        return mqueue[pk++%MAXQ];
}

char isempty() {
        return pk == kk;
}

int qlen() {
        return kk - pk;
}

void printq() {
        xil_printf("Queue:\n");
        xil_printf("Queue len: %d\n", qlen());
        for (int i = pk; i < kk; i++) {
                xil_printf("%d ", mqueue[i]);
        }
        xil_printf("End of queue\n");
}
// end quuee
//
ui gcd2 (ui a, ui b) {
        while (a != b) {
                if (b > a)
                        b -= a;
                else
                        a -= b;
        }

        return a;
}

int fillArray(const ui length){
        for(ui i = 0; i < length; i++){
                push(getnum());
        }
        return 0;
}

void communicate(int expectedReceive) {
	putfsl (expectedReceive, 0);
	for (int i = 0; i < expectedReceive; i++) {
		int rcvd = pop();
		putfsl(rcvd, 0);

		push(rcvd);
	}
}

int main(void){
		xil_printf("GCD fastest program in the world(tm)\n v. 0.0.1");
        //const int BSZ = 0x100;
        ui length = getnum();
        ui buffer[length];
        ui mySol;

        fillArray(length);

        int expectedReceive = qlen() / 2;
        communicate(expectedReceive);

        while (qlen() != 1) {
        	printq();
            int a = pop();
            int b = pop();
            int res = gcd2(a, b);
            push(res);
        }

        int aux_core_res;
        getfsl(aux_core_res, 0);

        xil_printf("Result of upper half is: %d\n", pop());
        xil_printf("Aux core returned: %d\n", aux_core_res);
}

Auxillary core program:

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <mb_interface.h>

// begin queue
#define MAXQ 100
int pk = 0, kk = 0;
int mqueue[MAXQ];

typedef unsigned int ui;

void push(ui e) {
        mqueue[kk++%MAXQ] = e;
}

ui pop () {
        return mqueue[pk++%MAXQ];
}

char isempty() {
        return pk == kk;
}

int qlen() {
        return kk - pk;
}

void printq() {
        xil_printf("Queue:\n");
        xil_printf("Queue len: %d\n", qlen());
        for (int i = pk; i < kk; i++) {
                xil_printf("%d ", mqueue[i]);
        }
        xil_printf("End of queue\n");
}
// end quuee


ui gcd2 (ui a, ui b) {
    while (a != b) {
        if (b > a)
            b -= a;
        else
            a -= b;
    }
	return a;
}

// Global definitions for communications
int expectedReceive;

void communicate() {
	getfsl (expectedReceive, 0);
	for (int i = 0; i < expectedReceive; i++) {
		int rcvd;
		getfsl(rcvd, 0);

		push(rcvd);
	}
}

int main(void){
	communicate();
	while (qlen() != 1) {
		printq();
	    int a = pop();
	    int b = pop();
	    int res = gcd2(a, b);
	    push(res);
	}

	// send to main_cpu
	putfsl(pop(), 0);
}


Wrong answer on 2 1 3.

17:26 2019-05-15


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity user_logic is
    Port ( clk : in STD_LOGIC;
           rstN : in STD_LOGIC;
           wren : in STD_LOGIC;
           waddr : in STD_LOGIC_VECTOR (1 downto 0);
           wdata : in STD_LOGIC_VECTOR (31 downto 0);
           rden : in STD_LOGIC;
           raddr : in STD_LOGIC_VECTOR (1 downto 0);
           rdata : out STD_LOGIC_VECTOR (31 downto 0);
           busy : out STD_LOGIC);
end user_logic;

architecture slow_arch of user_logic is
   type state_type is (idle, swap, sub);
   signal state_reg, state_next: state_type;
   signal a_reg, a_next, b_reg, b_next: unsigned(31 downto 0);
   --signal wren_current : STD_LOGIC := '0';
   signal gcd_current : unsigned(31 downto 0);
begin
   -- state & data registers
   process(clk,rstN, wdata,a_next,b_next)
   begin
      if rstN='0' then
         state_reg <= idle;
         
         b_reg <= unsigned(wdata);
         a_reg <= unsigned(wdata);
      elsif (clk'event and clk='1') then
         state_reg <= state_next;
         a_reg <= a_next;
         b_reg <= b_next;
      end if;
   end process;
   
   -- next-state logic & data path functional units/routing
   process(state_reg,a_reg,b_reg,wren,wdata)
   begin
      busy <= '1';
      --a_next <= a_reg;
      --b_next <= b_reg;
      case state_reg is
         when idle =>
            if wren='1' then -- and wren_current='0' then
               -- if user enters a == b
               busy <= '0';
               a_next <= unsigned(wdata);
               
               state_next <= swap;
               if (a_next = b_next) then
                 state_next <= idle;
               end if;
            else
               state_next <= idle;
               busy <= '0';
            end if;
         when swap =>
            if (a_reg=b_reg) then
               state_next <= idle;
               --wren_current <= '0';
            else
               if (a_reg < b_reg) then
                  a_next <= b_reg;
                  b_next <= a_reg;
               end if;
               state_next <= sub;
            end if;
         when sub =>
            if (a_reg = b_reg) then
                state_next <= idle;
            else
                a_next <= a_reg - b_reg;
                state_next <= swap;
            end if;
         end case;
   end process;
   -- output
   busy <= '0' when state_reg=idle else '1';
   rdata <= std_logic_vector(a_reg);
end slow_arch;

--architecture Behavioral of user_logic is
--    type STATE_TYPE is (S0, S1, S2, S3);
--    --attribute ENUM_ENCODING: STRING;
--    --attribute ENUM_ENCODING of STATE_TYPE: type is "0001 0010 0100 1000";
    
--    signal CS, NS: STATE_TYPE;
--    signal reset : STD_LOGIC;
--begin
--    -- insert the following after 'begin'
--    reset <= not rstN;
--    busy <= '0';
    
--    SYNC_PROC: process(clk, reset)
--    begin
--        if (reset = '1') then
--            CS <= S0;
--            -- other state variables reset
--        elsif rising_edge(clk) then
--            CS <= NS;
--            -- other state variable assignment
--        end if;
--    end process;
    
--    COMB_PROC: process(CS, wdata)
--    begin
--        -- assign default signals here to avoid latches
--    case CS is
--        when S0 =>
--            NS <= S1;
--            rdata <= wdata;
--        when S1 =>
--            NS <= S2;
--            rdata <= wren & rden  & "0000000000000000000000000000000";
--        when S2 =>
--            NS <= S3;
--            rdata <= wdata;
--        when S3 =>
--            NS <= S0;
--            rdata <= wdata;
--    end case;
--    end process;

--end Behavioral;


-------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity user_logic is
    Port ( clk : in STD_LOGIC;
            rstN : in STD_LOGIC;
            wren : in STD_LOGIC;
            waddr : in STD_LOGIC_VECTOR (1 downto 0);
            wdata : in STD_LOGIC_VECTOR (31 downto 0);
            rden : in STD_LOGIC;
            raddr : in STD_LOGIC_VECTOR (1 downto 0);
            rdata : out STD_LOGIC_VECTOR (31 downto 0);
            busy : out STD_LOGIC);
end user_logic;

architecture slow_arch of user_logic is
    type state_type is (idle, start, sub);
    signal state_reg, state_next: state_type;
    signal a_reg, a_next, b_reg, b_next: unsigned(31 downto 0);
    signal gcd_current : unsigned(31 downto 0);
begin
     -- state & data registers
    process(clk)
    begin
    if rstN='0' then
        state_reg <= idle;
        b_reg <= "00000000000000000000000000000000";
        a_reg <= "00000000000000000000000000000000";
		gcd_current <= unsigned(wdata);
    elsif (clk'event and clk='1') then
		state_reg <= state_next;
		
		a_reg <= a_next;
		b_reg <= b_next;
    end if;
end process;

process(state_reg, wren, a_reg, b_reg, wdata)
begin
	case state_reg is
	when idle =>
		if wren = '1' then
			state_next <= start;
			a_next <= unsigned(wdata);
			b_next <= gcd_current;
		end if;
		b_next <= "00000000000000000000000000000000";
		busy <= '0';
	when start =>
		if b_reg = "00000000000000000000000000000000" then
			state_next <= idle;
			b_next <= a_next;
		end if;
		
		if a_reg = b_reg then
			state_next <= idle;
		end if;
		
		busy <= '1';
		state_next <= sub;
	when sub =>
		if a_reg = b_reg then
			state_next <= idle;
			gcd_current <= a_reg;
		end if;
		
		if a_reg < b_reg then
			a_next <= 5;
			b_next <= 8;
		else
			a_next <= 6;
			b_next <= 5;
		end if;
		
		busy <= '1';
		state_next <= start;
	end case;
end process;

end slow_arch;


13:11 2019-05-17

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity user_logic is
    Port ( clk : in STD_LOGIC;
            rstN : in STD_LOGIC;
            wren : in STD_LOGIC;
            waddr : in STD_LOGIC_VECTOR (1 downto 0);
            wdata : in STD_LOGIC_VECTOR (31 downto 0);
            rden : in STD_LOGIC;
            raddr : in STD_LOGIC_VECTOR (1 downto 0);
            rdata : out STD_LOGIC_VECTOR (31 downto 0);
            busy : out STD_LOGIC);
end user_logic;

architecture slow_arch of user_logic is
    type state_type is (idle, start, sub, schwift);
    signal state_reg, state_next: state_type;
    signal a_reg, a_next, b_reg, b_next: unsigned(31 downto 0);
    signal gcd_current : unsigned(31 downto 0);
begin
     -- state & data registers
    process(clk)
    begin
    if rstN='0' then
        state_reg <= idle;
        b_reg <= "00000000000000000000000000000000";
        a_reg <= "00000000000000000000000000000000";
		gcd_current <= "00000000000000000000000000000000";
    elsif (clk'event and clk='1') then
		state_reg <= state_next;
		
		a_reg <= a_next;
		b_reg <= b_next;
    end if;
end process;

process(state_reg, wren, a_reg, b_reg, wdata)
begin
	case state_reg is
	when idle =>
		if wren = '1' then
			state_next <= start;
			a_next <= unsigned(wdata);
			b_next <= gcd_current;
		end if;
		b_next <= "00000000000000000000000000000000";
		busy <= '0';
	when start =>
		if b_reg = "00000000000000000000000000000000" or (a_reg = b_reg) then
			state_next <= idle;
			gcd_current <= a_reg;
			b_next <= a_next;
		else
			state_next <= schwift;
		end if;
		
		busy <= '1';
	when schwift =>
		if a_reg < b_reg then
			a_next <= b_reg;
			b_next <= a_reg;
		else
			a_next <= a_reg;
			b_next <= b_reg;
		end if;
		state_next <= sub;
		busy <= '1';
	
	when sub =>
		if a_reg = b_reg then
			state_next <= idle;
			gcd_current <= a_reg;
		end if;
		
		a_next <= a_reg - b_reg;
		b_next <= b_reg;
		
		busy <= '1';
		state_next <= schwift;
	end case;
end process;

end slow_arch;

11:07 2019-05-22


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity user_logic is
    Port ( clk : in STD_LOGIC;
            rstN : in STD_LOGIC;
            wren : in STD_LOGIC;
            waddr : in STD_LOGIC_VECTOR (1 downto 0);
            wdata : in STD_LOGIC_VECTOR (31 downto 0);
            rden : in STD_LOGIC;
            raddr : in STD_LOGIC_VECTOR (1 downto 0);
            rdata : out STD_LOGIC_VECTOR (31 downto 0);
            busy : out STD_LOGIC);
end user_logic;

architecture slow_arch of user_logic is
    type state_type is (idle, start, sub, schwift);
    signal state_reg, state_next: state_type;
    signal a_reg, a_next, b_reg, b_next: unsigned(31 downto 0);
    signal gcd_current : unsigned(31 downto 0);
	signal gcd_next : unsigned(31 downto 0);
begin
     -- state & data registers
    process(clk)
    begin
    if rstN='0' then
        state_reg <= idle;
        b_reg <= "00000000000000000000000000000000";
        a_reg <= "00000000000000000000000000000000";
		gcd_current <= "10000000000000000000000000000000";
    elsif (clk'event and clk='1') then
		state_reg <= state_next;
		
		a_reg <= a_next;
		b_reg <= b_next;
    end if;
end process;

process(state_reg, wren, a_reg, b_reg, wdata, clk)
begin
	case state_reg is
	when idle =>
		if wren = '1' then
			state_next <= start;
			a_next <= unsigned(wdata);
			--b_next <= gcd_current;
			
			if a_reg = b_reg and b_reg = "00000000000000000000000000000000" then
				-- after reset b_next undefined. Lets fix it.
				b_next <= unsigned(wdata);
			end if;
		end if;
		
		busy <= '0';
		rdata <= std_logic_vector(a_reg);
	when start =>
		if (a_reg = b_reg) then
			state_next <= idle;
		else
			state_next <= schwift;
		end if;
		
		busy <= '1';
	when schwift =>
		if a_reg = b_reg then
			state_next <= idle;
		else
			if a_reg < b_reg then
				a_next <= b_reg;
				b_next <= a_reg;
			else
				a_next <= a_reg;
				b_next <= b_reg;
			end if;
			state_next <= sub;
			busy <= '1';
		end if;
	
	when sub =>
		if a_reg = b_reg then
			state_next <= idle;
			gcd_next <= a_reg;
		else
			a_next <= a_reg - b_reg;
			b_next <= b_reg;
			state_next <= schwift;
		end if;
		
		rdata <= std_logic_vector(a_reg);
		busy <= '1';
	end case;
end process;

end slow_arch;

16:13 2019-05-24

((((((((((((((((((((((((((((((((((((((((((((((((((((((((

counter from 0 to n

))))))))))))))))))))))))))))))))))))))))))))))))))))))))


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Lucas2 is
    port (clk : in std_logic;
          rstn : in std_logic;
          enable : in std_logic;
          res : out std_logic_vector(31 downto 0));
end Lucas2;

architecture Behavioral of Lucas2 is
    signal counter : unsigned(31 downto 0);
    signal counter_next : unsigned(31 downto 0);
    signal res_next : unsigned(31 downto 0);
begin
    process(clk, rstn)
    begin
        if rstn = '0' then
            counter <= "00000000000000000000000000000000";
            res <= "00000000000000000000000000000000";
        elsif (clk'event and clk='1') then
            counter <= counter_next;
            res <= std_logic_vector(res_next);
        end if;
    end process;
    
    process(clk,counter_next)
    begin
        counter_next <= counter + 1;
        --res_next <= counter;
    end process;

end Behavioral;

Sample testbench for the counter:



library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
--library UNISIM;
--use UNISIM.VComponents.all;

entity FibSim1 is
end FibSim1;

architecture Behavioral of FibSim1 is
    component Lucas2
        port (  clk : std_logic;
        rstn : std_logic;
        enable : std_logic);
    end component;
    
    signal clk : std_logic;
    signal rstn : std_logic;
    signal enable : std_logic;
    
    constant clk_spd : time := 12.5 ns;
begin
    clock_gen : process is
    begin
        clk <= '0' after clk_spd, '1' after 2*clk_spd;
        wait for 2*clk_spd;
    end process clock_gen;
    
    uut: lucas2 port map (
        clk => clk,
        rstn => rstn,
        enable => enable);
        
    stimulus: process
    begin
        rstn <= '0';
        enable <= '0';
        wait for 40ns;
        
        rstn <= '1';
        enable <= '1';
        wait;
    end process;

end Behavioral;


*************************************
* Fibbonaci numbers                 *
*************************************

 /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//
//\\ \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/ //\\
\\//                                                        \\//
 \/                                                          \/
 /\                                                          /\
//\\                                                        //\\
\\//                                                        \\//
//\\                                                        //\\
\\//                                                        \\//
 \/                 Fibbonaci numbers                        \/
 /\                                                          /\
//\\                                                        //\\
\\//                                                        \\//
//\\                                                        //\\
\\//                                                        \\//
 \/                                                          \/
 /\                                                          /\
//\\                                                        //\\
\\// /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\ \\//
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//
 \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/hjw


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
--library UNISIM;
--use UNISIM.VComponents.all;

entity Lucas is
port (
    clk : std_logic;
    reset : std_logic;
    enable : std_logic
    );
end Lucas;

architecture Behavioral of Lucas is
    signal even : std_logic;
    signal results_int : unsigned(31 downto 0);
    signal results_valid_int : std_logic;
    signal results_valid : std_logic;
    signal results : unsigned(31 downto 0);
    signal fib_r1 : unsigned(31 downto 0);
    signal fib_r2 : unsigned(31 downto 0);
    signal sum : unsigned(31 downto 0);
    
    constant max_count : integer := 1000;
begin
    fib_reg : process (clk, reset) is
    begin
        if reset = '1' then
            fib_r1 <= x"00000001";
            fib_r2 <= (others => '0');
            results_int <= (others => '0');
        elsif rising_edge(clk) then
            if enable = '1' then
                fib_r1 <= sum;
                fib_r2 <= fib_r1;
                
                if even ='1' and results_valid_int = '0' then
                    results_int <= results_int + sum;
                end if;
            end if;
        end if;
    end process fib_reg;
    
    sum <= fib_r1 + fib_r2;
    
    even <= '1' when sum(0) = '0' else '0';
    results_valid_int <= '1' when sum >= max_count else '0';
    results_valid <= results_valid_int;
    results <= results_int;
end Behavioral;


***********************************
* Fibbonaci numbers testbench     *
***********************************


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
--library UNISIM;
--use UNISIM.VComponents.all;

entity FibSim1 is
end FibSim1;

architecture Behavioral of FibSim1 is
    component Lucas
        port (  clk : std_logic;
        reset : std_logic;
        enable : std_logic);
    end component;
    
    signal clk : std_logic;
    signal reset : std_logic;
    signal enable : std_logic;
    
    constant clk_spd : time := 12.5 ns;
begin
    clock_gen : process is
    begin
        clk <= '0' after clk_spd, '1' after 2*clk_spd;
        wait for 2*clk_spd;
    end process clock_gen;
    
    uut: lucas port map (
        clk => clk,
        reset => reset,
        enable => enable);
        
    stimulus: process
    begin
        reset <= '1';
        enable <= '0';
        wait for 40ns;
        
        reset <= '0';
        enable <= '1';
        wait;
    end process;

end Behavioral;

0000000000000000000000000000000000000000000000
----------------------------------------------

Old My IP in AXI

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity user_logic is
    Port ( clk : in STD_LOGIC;
            rstN : in STD_LOGIC;
            wren : in STD_LOGIC;
            waddr : in STD_LOGIC_VECTOR (1 downto 0);
            wdata : in STD_LOGIC_VECTOR (31 downto 0);
            rden : in STD_LOGIC;
            raddr : in STD_LOGIC_VECTOR (1 downto 0);
            rdata : out STD_LOGIC_VECTOR (31 downto 0);
            busy : out STD_LOGIC);
end user_logic;

architecture slow_arch of user_logic is
    type state_type is (idle, start, sub, schwift);
    signal state_reg, state_next: state_type;
    signal a_reg, a_next, b_reg, b_next: unsigned(31 downto 0);
    signal gcd_current : unsigned(31 downto 0);
	signal gcd_next : unsigned(31 downto 0);
begin
     -- state & data registers
    process(clk)
    begin
    if rstN='0' then
        state_reg <= idle;
        b_reg <= "00000000000000000000000000000000";
        a_reg <= "00000000000000000000000000000000";
		gcd_current <= "10000000000000000000000000000000";
    elsif (clk'event and clk='1') then
		state_reg <= state_next;
		
		a_reg <= a_next;
		b_reg <= b_next;
    end if;
end process;

process(state_reg, wren, a_reg, b_reg, wdata, clk)
begin
	case state_reg is
	when idle =>
		if wren = '1' then
			state_next <= start;
			a_next <= unsigned(wdata);
			--b_next <= gcd_current;
			
			if a_reg = b_reg and b_reg = "00000000000000000000000000000000" then
				-- after reset b_next undefined. Lets fix it.
				b_next <= unsigned(wdata);
			end if;
		end if;
		
		busy <= '0';
		rdata <= std_logic_vector(a_reg);
	when start =>
		if (a_reg = b_reg) then
			state_next <= idle;
		else
			state_next <= schwift;
		end if;
		
		busy <= '1';
	when schwift =>
		if a_reg = b_reg then
			state_next <= idle;
		else
			if a_reg < b_reg then
				a_next <= b_reg;
				b_next <= a_reg;
			else
				a_next <= a_reg;
				b_next <= b_reg;
			end if;
			state_next <= sub;
			busy <= '1';
		end if;
	
	when sub =>
		if a_reg = b_reg then
			state_next <= idle;
			gcd_next <= a_reg;
		else
			a_next <= a_reg - b_reg;
			b_next <= b_reg;
			state_next <= schwift;
		end if;
		
		rdata <= std_logic_vector(a_reg);
		busy <= '1';
	end case;
end process;

end slow_arch;

Shut down C SDK before making changes in HW.
Must select Tools / Report / IP hierarchy and update in order to use modified IP AXI.


rstN <= '0';
    wren <= '0';
    wdata <= (others => '0');
    waddr <= (others => '0'); -- 0 result, 1 busy wait
    wait for 20 ns;
    rstN <= '1';
    wdata <= X"00000020"; -- 34
    wren <= '1';
    wait for 10 ns;
    wren <= '0';
    wait until busy='0';
	--wait for 10 ns;
    rstN <= '1';
    wdata <= X"00000006"; -- 6  gcd(34, 6) = gcd(6, 4) = gcd(4, 2) = 2
    wren <= '1';
	wait until busy='0';
	rstN <= '1';
    wdata <= X"00000003"; -- 6  gcd(34, 6) = gcd(6, 4) = gcd(4, 2) = 2
    wren <= '1';
	wait until busy='0';
    --wait for 10 ns;
    wren <= '0';
    wait for 40ns;
    waddr <= (others => '1');
    wait for 20ns;
    waddr <= (others => '0');
    wait;
13:26 2019-05-28


#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "myip.h"
#include "xil_io.h"

const int testcase_count = 5;

int testcase1[] = {10, 9585, 8733, 14839, 7526, 11005, 12567, 12425, 13490, 12638, 10579};
int testcase2[] = {30, 9456, 6507, 12192, 14733, 10431, 12606, 9303, 12864, 14118, 9504, 14049, 5589, 10311, 5097, 8175, 13941, 12495, 14376, 8694, 11214, 7674, 10686, 8241, 8601, 14865, 9780, 9831, 10494, 7977, 10716};
int testcase3[] = {50, 86954, 49688, 62110, 136642, 118009, 55899, 105587, 49688, 118009, 111798, 68321, 55899, 118009, 124220, 74532, 49688, 68321, 93165, 136642, 142853, 49688, 130431, 99376, 130431, 74532, 142853, 111798, 93165, 93165, 80743, 136642, 99376, 49688, 136642, 80743, 68321, 68321, 86954, 62110, 62110, 124220, 68321, 105587, 130431, 118009, 74532, 93165, 68321, 55899, 124220};
int testcase4[] = {70, 12800, 5248, 6656, 8192, 11264, 14208, 13952, 14336, 10752, 12672, 14208, 12416, 14208, 12544, 8192, 10880, 8832, 6400, 11520, 5120, 11264, 8576, 14464, 9856, 9472, 6400, 8704, 6400, 9984, 8960, 13696, 14592, 7680, 12672, 14592, 6656, 5376, 13824, 8576, 5888, 7680, 4992, 11904, 12544, 8192, 14848, 7552, 6272, 11520, 12800, 10112, 10112, 14208, 5504, 6016, 9088, 7424, 4992, 7168, 8064, 11520, 10368, 8064, 6656, 11136, 14848, 6528, 6528, 6784, 8064};
int testcase5[] = {100, 14675, 11740, 7631, 5870, 13501, 14088, 9392, 6457, 9979, 14675, 11153, 12327, 8218, 8805, 9979, 7631, 7631, 12914, 5283, 11740, 9392, 11740, 10566, 14088, 10566, 9979, 14088, 7631, 8218, 10566, 10566, 9979, 8218, 11153, 9392, 14088, 14088, 14675, 13501, 9392, 8805, 9979, 5870, 7044, 12327, 14088, 7044, 8218, 6457, 9979, 6457, 9392, 8218, 7044, 4696, 8805, 7631, 7044, 8805, 9979, 7631, 14088, 9392, 11740, 8218, 10566, 8218, 9979, 14675, 5870, 8805, 14088, 11153, 7044, 10566, 9979, 11740, 7044, 6457, 9392, 7631, 5283, 5870, 14088, 5870, 12327, 8218, 6457, 11153, 9392, 9979, 11153, 7631, 5283, 9979, 8805, 6457, 5870, 11740, 14088};

const int answer1 = 1;
const int answer2 = 3;
const int answer3 = 1;
const int answer4 = 2;
const int answer5 = 1;

int re () {
	int reg0 = MYIP_mReadReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0);
	return reg0;
}

void do_testcase(int *testcase, int sz, const int correct_answer) {
	// print test case to stdin
	int j;
	xil_printf("\nTest case\n============================\n\nContents: ");
	for (j = 0; j < sz; j++) {
		xil_printf("%d ", testcase[j]);
	}
	xil_printf("\nThe test case contains %d elements.\n", sz);
	xil_printf("\nRunning... ");

	// do test case

	// start timing

	int i;
	for (i = 0; i < sz; i++) {
	    	MYIP_mWriteReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0, testcase[i]);
	    	while (1) {
	    		// interesting construction
	    		int a = re();
	    		int b = re();

	    		if (a == b)
	    			break;
	    	}
	}

	// end timing

	int reg0 = re();
	xil_printf("Accelerator returned: %d: ", reg0);
	// print result of the test
	if (reg0 == correct_answer) {
		xil_printf ("OK");
	} else {
		xil_printf ("FAILED");
	}

	xil_printf("\n");
}

int main()
{
    init_platform();

    print("MicroBlaze with Hardware Extensions ver 0.0.1\n\r");
    int i;

    // digital delay loop
    for (i = 0; i < 10; i++) {
    	int reg0 = MYIP_mReadReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0);
    	xil_printf("REG0: %x\n", reg0);
    }

    //do_testcase(testcase1, sizeof(testcase1)/sizeof(int), answer1);
    //do_testcase(testcase2, sizeof(testcase2)/sizeof(int), answer2);
    do_testcase(testcase3, sizeof(testcase3)/sizeof(int), answer3);
    //do_testcase(testcase4, sizeof(testcase4)/sizeof(int), answer4);
    //do_testcase(testcase5, answer5);

    //int reg0 = MYIP_mReadReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0);
    //xil_printf("REG0: %d\n", reg0);

    cleanup_platform();
    return 0;
}

/*
del IP
Refresh IP Catalog
add ip
connection automation
*/


///////////////////////////////////////////

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- working, no repetition prevention

entity user_logic is
    Port ( clk : in STD_LOGIC;
            rstN : in STD_LOGIC;
            wren : in STD_LOGIC;
            waddr : in STD_LOGIC_VECTOR (1 downto 0);
            wdata : in STD_LOGIC_VECTOR (31 downto 0);
            rden : in STD_LOGIC;
            raddr : in STD_LOGIC_VECTOR (1 downto 0);
            rdata : out STD_LOGIC_VECTOR (31 downto 0);
            busy : out STD_LOGIC);
end user_logic;

architecture slow_arch of user_logic is
    type state_type is (idle, start, sub, schwift);
    signal state_reg, state_next: state_type;
    signal a_reg, a_next, b_reg, b_next: unsigned(31 downto 0);
    signal gcd_current : unsigned(31 downto 0);
	signal gcd_next : unsigned(31 downto 0);
	
	signal sch : unsigned(31 downto 0); -- hack to prevent double write
	signal sch_next : unsigned(31 downto 0);
begin
     -- state & data registers
    process(clk)
    begin
    if rstN='0' then
        state_reg <= idle;
        b_reg <= "00000000000000000000000000000000";
        a_reg <= "00000000000000000000000000000000";
		gcd_current <= "10000000000000000000000000000000";
		sch <= "00000000000000000000000000000000";
    elsif (clk'event and clk='1') then
		state_reg <= state_next;
		
		a_reg <= a_next;
		b_reg <= b_next;
		sch <= sch_next;
		
		--if raddr = "00" and (state_reg = idle or state_next = start) then -- zero for get result
		--  rdata <= std_logic_vector(a_reg);
		--  rden_next <= '1';
		--elsif raddr = "00" and state_reg /= idle then
		--  rdata <= "11111111111111111111111111111111";
		--  rden_next <= '1';
		--elsif state_reg = idle and raddr = "01" then
		--  rdata <= "00000000000000000000000000000001"; -- reg1 = 0 <= Computation ready
		--  rden_next <= '1';
		--else -- raddr = "01" and state_reg /= idle
		--  rdata <= "00000000000000000000000000000000";
		--  rden_next <= '1';
		--end if;
		
		-- unable to read registers
		--if raddr = "00" then
		--  rdata <= "00000000000000000000000000000000";
		--else
		--  rdata <= "00000000000000000000000000000001";
		--end if;
		
		rdata <= std_logic_vector(a_reg);
    end if;
end process;

process(state_reg, wren, a_reg, b_reg, wdata, clk)
begin
	case state_reg is
	when idle =>
		if wren = '1' then
			state_next <= start;
			sch_next <= unsigned(wdata);
			a_next <= unsigned(wdata);
			
			--b_next <= gcd_current;
			
			if a_reg = b_reg and b_reg = "00000000000000000000000000000000" then
				-- after reset b_next undefined. Lets fix it.
				b_next <= unsigned(wdata);
			end if;
		end if;
		
		busy <= '0';
	when start =>
		if (a_reg = b_reg) then
			state_next <= idle;
		else
			state_next <= schwift;
		end if;
		
		busy <= '1';
	when schwift =>
		if a_reg = b_reg then
			state_next <= idle;
		else
			if a_reg < b_reg then
				a_next <= b_reg;
				b_next <= a_reg;
			else
				a_next <= a_reg;
				b_next <= b_reg;
			end if;
			state_next <= sub;
			busy <= '1';
		end if;
	
	when sub =>
		if a_reg = b_reg then
			state_next <= idle;
			gcd_next <= a_reg;
		else
			a_next <= a_reg - b_reg;
			b_next <= b_reg;
			state_next <= schwift;
		end if;
		
		busy <= '1';
	end case;
end process;

end slow_arch;

15:25 2019-05-28


#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "myip.h"
#include "xil_io.h"

#define TMRCTR_DEVICE_ID XPAR_TMRCTR_0_DEVICE_ID

const int testcase_count = 5;

int testcase1[] = {10, 9585, 8733, 14839, 7526, 11005, 12567, 12425, 13490, 12638, 10579};
int testcase2[] = {30, 9456, 6507, 12192, 14733, 10431, 12606, 9303, 12864, 14118, 9504, 14049, 5589, 10311, 5097, 8175, 13941, 12495, 14376, 8694, 11214, 7674, 10686, 8241, 8601, 14865, 9780, 9831, 10494, 7977, 10716};
int testcase3[] = {50, 86954, 49688, 62110, 136642, 118009, 55899, 105587, 49688, 118009, 111798, 68321, 55899, 118009, 124220, 74532, 49688, 68321, 93165, 136642, 142853, 49688, 130431, 99376, 130431, 74532, 142853, 111798, 93165, 93165, 80743, 136642, 99376, 49688, 136642, 80743, 68321, 68321, 86954, 62110, 62110, 124220, 68321, 105587, 130431, 118009, 74532, 93165, 68321, 55899, 124220};
int testcase4[] = {70, 12800, 5248, 6656, 8192, 11264, 14208, 13952, 14336, 10752, 12672, 14208, 12416, 14208, 12544, 8192, 10880, 8832, 6400, 11520, 5120, 11264, 8576, 14464, 9856, 9472, 6400, 8704, 6400, 9984, 8960, 13696, 14592, 7680, 12672, 14592, 6656, 5376, 13824, 8576, 5888, 7680, 4992, 11904, 12544, 8192, 14848, 7552, 6272, 11520, 12800, 10112, 10112, 14208, 5504, 6016, 9088, 7424, 4992, 7168, 8064, 11520, 10368, 8064, 6656, 11136, 14848, 6528, 6528, 6784, 8064};
int testcase5[] = {100, 14675, 11740, 7631, 5870, 13501, 14088, 9392, 6457, 9979, 14675, 11153, 12327, 8218, 8805, 9979, 7631, 7631, 12914, 5283, 11740, 9392, 11740, 10566, 14088, 10566, 9979, 14088, 7631, 8218, 10566, 10566, 9979, 8218, 11153, 9392, 14088, 14088, 14675, 13501, 9392, 8805, 9979, 5870, 7044, 12327, 14088, 7044, 8218, 6457, 9979, 6457, 9392, 8218, 7044, 4696, 8805, 7631, 7044, 8805, 9979, 7631, 14088, 9392, 11740, 8218, 10566, 8218, 9979, 14675, 5870, 8805, 14088, 11153, 7044, 10566, 9979, 11740, 7044, 6457, 9392, 7631, 5283, 5870, 14088, 5870, 12327, 8218, 6457, 11153, 9392, 9979, 11153, 7631, 5283, 9979, 8805, 6457, 5870, 11740, 14088};

const int answer1 = 1;
const int answer2 = 3;
const int answer3 = 1;
const int answer4 = 2;
const int answer5 = 1;

int re () {
	int reg0 = MYIP_mReadReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0);
	return reg0;
}

void do_testcase(int *testcase, int sz, const int correct_answer) {
	// print test case to stdin
	int j;
	xil_printf("\nTest case\n============================\n\nContents: ");
	for (j = 0; j < sz; j++) {
		xil_printf("%d ", testcase[j]);
	}
	xil_printf("\nThe test case contains %d elements.\n", sz);
	xil_printf("\nRunning... ");

	// do test case

	// start timing

	int i;
	for (i = 0; i < sz; i++) {
	    	MYIP_mWriteReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0, testcase[i]);
	    	while (1) {
	    		// interesting construction
	    		int a = re();
	    		int b = re();

	    		if (a == b)
	    			break;
	    	}
	}

	// end timing

	int reg0 = re();
	xil_printf("Accelerator returned: %d: ", reg0);
	// print result of the test
	if (reg0 == correct_answer) {
		xil_printf ("OK");
	} else {
		xil_printf ("FAILED");
	}

	xil_printf("\n");
}

int main()
{
    init_platform();
    XTmrCtr TimerCounter;
    XTmrCtr *TmrCtrInstancePtr = &TimerCoutner;

    int status = XTmrCtr_Initialize(TmrCtrInstancePtr, DeviceId)
    print("MicroBlaze with Hardware Extensions ver 0.0.1\n\r");
    int i;

    // digital delay loop
    for (i = 0; i < 10; i++) {
    	int reg0 = MYIP_mReadReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0);
    	xil_printf("REG0: %x\n", reg0);
    }

    //do_testcase(testcase1, sizeof(testcase1)/sizeof(int), answer1);
    //do_testcase(testcase2, sizeof(testcase2)/sizeof(int), answer2);
    do_testcase(testcase3, sizeof(testcase3)/sizeof(int), answer3);
    //do_testcase(testcase4, sizeof(testcase4)/sizeof(int), answer4);
    //do_testcase(testcase5, answer5);

    //int reg0 = MYIP_mReadReg(XPAR_MYIP_0_S00_AXI_BASEADDR, 0);
    //xil_printf("REG0: %d\n", reg0);

    cleanup_platform();
    return 0;
}

/*
del IP
Refresh IP Catalog
add ip
connection automation
*/

